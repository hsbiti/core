= API JSON RPC

Aquí esta la documentación sobre los métodos de la API. En primer lugar están las especificaciones (JSON RPC 2.0):

A la API se accede a través de la url: #URL_JEEDOM#/core/api/jeeApi.php

== Misceláneos

=== ping

Devuelve pong , permite probar la comunicación con Jeedom

=== versión

Devuelve la versión de Jeedom

=== datetime

Devuelve la fecha y hora de jeedom en microsegundos

== API JSON Event

=== event::changes 

Devuelve la lista de cambios desde la fecha y hora en el parámetro (debe estar en microsegundos). También en la respuesta de la fecha y hora actual de Jeedom (para ser reutilizado para la petición siguiente)

Parámetros:

- int datetime

== API JSON Plugin

=== plugin::listPlugin
Devuelve una lista de todos los plugins

Parámetros:

-int activateOnly = 0 (devuelve sólo la lista de plugins activos)
-int orderByCaterogy = 0 (devuelve la lista de plugins ordenados por categoría)


== API JSON Objet

=== object::all
Devuelve una lista de todos los objetos

=== object::full
Devuelve una lista de todos los objetos, para cada objeto de cada equipo y sus servicios, todos sus comandos, así como los Estados (para comandos de tipo información)

=== object::byId
Devuelve el objeto especificado

Parámetros:

- int id

=== object::fullById
Devuelve un objeto, sus dispositivos y cada dispositivo con todos sus comandos, así como los Estados (para comandos de tipo información)

== API JSON EqLogic
=== eqLogic::all
Devuelve una lista de todos los dispositivos

=== eqLogic::fullById
Devuelve un dispositivo y sus comandos, así como los estados (para comandos de tipo información)

=== eqLogic::byId
Devuelve el dispositivo especificado

Parámetros:

- int id

=== eqLogic::byType

Devuelve todas las instalaciones pertenecientes al tipo especificado (plugin)

Parámetros:

- string type

=== eqLogic::byObjectId
Devuelve todas las instalaciones pertenecientes a la especificada

Parámetros:
- int object_id

=== eqLogic::byTypeAndId
Devuelve un array de equipos dependiendo de la configuración. El resultado será de la forma array('eqType1' =>array( 'id'=>...,'cmds' => array(....)),'eqType2' =>array( 'id'=>...,'cmds' => array(....))....,id1 => array( 'id'=>...,'cmds' => array(....)),id2 => array( 'id'=>...,'cmds' => array(....))..)

Parámetros:

-string eqType [] = array de los tipos de dispositivos necesarios
-int [] id = matriz ID de dispositivos deseados personalizados

=== eqLogic::save
Devuelve el dispositivo guardado/creado

Parámetros:

-int id (vacío si es una creación)
-string eqType_name (tipo guión de dispositivo,  virtual...)
- string $name
- string $logicalId = <nowiki>''</nowiki>
- int $object_id = null
- int $eqReal_id = null;
- int $isVisible = 0;
- int $isEnable = 0;
- array $configuration;
- array $specificCapatibilities;
- int $timeout;
- array $category;

== API JSON Cmd

=== cmd::all
Devuelve la lista de todos los comandos

=== cmd::byId
Devuelve el comando especificado

Parámetros:

- int id

=== cmd::byEqLogicId
Devuelve todos los comandos que pertenecen al dispositivo especificado

Parámetros:

- int eqLogic_id

=== cmd::execCmd
Ejecuta el comando especificado

Parámetros:

- int id
-[options] lista de opciones  del comando (dependiendo el tipo y el subtipo del comando)

=== cmd::getStatistique
Devuelve las estadísticas sobre el comando (no funciona en los comapdo tipo información e historico)

Parámetros:

- int id
-string startTime: fecha de inicio para el cálculo de las estadística
- string endTime : fecha de fin del calculo de las estadisticas

=== cmd::getTendance
Devuelve la tendencia sobre el comando (no funciona con los comandos  tipo información e historicos)

Parámetros:

- int id
- string startTime : fecha de inicio de cálculo de la tendencia
- string endTime : fecha final del cálculo de la tendencia

=== cmd::getHistory
Devuelve el historico del comando (no funciona con comandos tipo información e historicos)

Parámetros:

- int id
- string startTime : fecha de inicio del historico
- string endTime : date de fin del historico


== API JSON Scenario

=== scenario::all
Devuelve una lista de todos los escenarios

=== scenario::byId
Devuelve el escenario especificado

Parámetros:

- int id

=== scenario::changeState
Cambia el estado del escenario especificado.

Parámetros:

- int id
- string state : [run,stop,enable,disable]

== API JSON datastore (variable)

=== datastore::byTypeLinkIdKey
Recupera el valor de una variable que se almacena en el almacén de datos

Parámetros:

- string type : tipo de valor almacenado (para los escenarios es scenario)
- id link: -1 para el total (valor para escenarios por defecto, o le id del escenario)
- string key : nombre de valor

=== datastore::save
Guarda el valor de una variable en el almacén de datos

Parámetros:

- string type : tipo de valor almacenado (para los escenarios es scenario)
- id link: -1 para el total (valor para escenarios por defecto, o le id del escenario)
- string key : nombre de valor
- mixte value : valor a guardar

== API JSON Message

=== message::all
Devuelve una lista de todos los mensajes

=== message::removeAll
Elimina todos los mensajes

== API JSON Interaction

=== interact::tryToReply
Trata de coincidir con una aplicación con interacción, realiza la acción y responde en consecuencia

Parámetros:

- query  (frase de petición)

== API JSON System

=== jeeNetwork::halt
Permite detener Jeedom

=== jeeNetwork::reboot
Permite reiniciar Jeedom


== API JSON plugin

=== plugin::install
Instalación/actualización de un plugin determinado

Parámetros:

- string plugin_id : nombre del plugin (nombre lógico)

=== plugin::remove
Eliminación de un plugin determinado

Parámetros:

- string plugin_id : nombre del plugin (nombre lógico)

== API JSON update

=== update::all
Devuelve una lista de todos los componentes instalados, sus versiones e información asociada

=== update::checkUpdate
Permite comprobar las actualizaciones

=== update::update
Permite actualizar Jeedom y todos los plugins

== API JSON Ejemplos
Aquí  un ejemplo del uso de la API. Para el ejemplo de abajo use https://github.com/jeedom/core/blob/stable/core/class/jsonrpcClient.class.php [esta clase php] que permite simplificar el uso de la api.

Recuperar la lista de objetos:


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('object::all', array())){
    print_r($jsonrpc->getResult());
}else{
    echo $jsonrpc->getError();
}
 
Ejecutar un comando (con una opción de un título y mensaje)


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('cmd::execCmd', array('id' => #cmd_id#, 'options' => array('title' => 'Coucou', 'message' => 'Ca marche')))){
    echo 'OK';
}else{
    echo $jsonrpc->getError();
}
 
La API es también utilizable en otro idioma (solo un post en una página) 